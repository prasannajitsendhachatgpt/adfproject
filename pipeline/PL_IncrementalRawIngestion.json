{
	"name": "PL_IncrementalRawIngestion",
	"properties": {
		"activities": [
			{
				"name": "GetWatermark",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "JsonSource",
						"storeSettings": {
							"type": "AzureBlobFSReadSettings",
							"recursive": true,
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "JsonReadSettings"
						}
					},
					"dataset": {
						"referenceName": "DS_ADLSG2_Json",
						"type": "DatasetReference",
						"parameters": {
							"storageAccountName": {
								"value": "@pipeline().parameters.StorageAccountName",
								"type": "Expression"
							},
							"containerName": {
								"value": "@pipeline().parameters.WatermarkContainer",
								"type": "Expression"
							},
							"fileDir": {
								"value": "@concat(pipeline().parameters.WatermarkFIleDir,'/',pipeline().parameters.Table)",
								"type": "Expression"
							},
							"fileName": {
								"value": "@pipeline().parameters.WatermarkFileName",
								"type": "Expression"
							}
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "IngestRaw",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "GetWatermark",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Get PLStartDT",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "PostgreSqlV2Source",
						"query": {
							"value": "SELECT * FROM @{pipeline().parameters.Schema}.@{pipeline().parameters.Table} WHERE @{pipeline().parameters.WatermarkColName} > '@{if(empty(pipeline().parameters.BackfillWatermark),activity('GetWatermark').output.value[0].cdc,pipeline().parameters.BackfillWatermark)}'\n\n",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00"
					},
					"sink": {
						"type": "JsonSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "JsonWriteSettings"
						}
					},
					"enableStaging": false
				},
				"inputs": [
					{
						"referenceName": "DS_PostgreDB",
						"type": "DatasetReference",
						"parameters": {
							"KVName": {
								"value": "@pipeline().parameters.KVName",
								"type": "Expression"
							},
							"server": {
								"value": "@pipeline().parameters.server",
								"type": "Expression"
							},
							"port": {
								"value": "@pipeline().parameters.port",
								"type": "Expression"
							},
							"DBName": {
								"value": "@pipeline().parameters.DBName",
								"type": "Expression"
							},
							"user": {
								"value": "@pipeline().parameters.user",
								"type": "Expression"
							},
							"PWsecretName": {
								"value": "@pipeline().parameters.PWsecretName",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "DS_ADLSG2_Json",
						"type": "DatasetReference",
						"parameters": {
							"storageAccountName": {
								"value": "@pipeline().parameters.StorageAccountName",
								"type": "Expression"
							},
							"containerName": {
								"value": "@pipeline().parameters.DataContainer",
								"type": "Expression"
							},
							"fileDir": {
								"value": "@pipeline().parameters.Table",
								"type": "Expression"
							},
							"fileName": {
								"value": "@concat(pipeline().parameters.Table,'_',variables('PLStartDT'))",
								"type": "Expression"
							}
						}
					}
				]
			},
			{
				"name": "IncrementalDataCondition",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "IngestRaw",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@greater(activity('IngestRaw').output.dataRead,0)",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "DeletEmptyCopyFile",
							"type": "Delete",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataset": {
									"referenceName": "DS_ADLSG2_Json",
									"type": "DatasetReference",
									"parameters": {
										"storageAccountName": {
											"value": "@pipeline().parameters.StorageAccountName",
											"type": "Expression"
										},
										"containerName": {
											"value": "@pipeline().parameters.DataContainer",
											"type": "Expression"
										},
										"fileDir": {
											"value": "@pipeline().parameters.Table",
											"type": "Expression"
										},
										"fileName": {
											"value": "@concat(pipeline().parameters.Table,'_',variables('PLStartDT'))",
											"type": "Expression"
										}
									}
								},
								"enableLogging": false,
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								}
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "GetLatestWatermark",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "PostgreSqlV2Source",
									"query": {
										"value": "SELECT MAX(@{pipeline().parameters.WatermarkColName}) AS latest_watermark FROM @{pipeline().parameters.Schema}.@{pipeline().parameters.Table}",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00"
								},
								"dataset": {
									"referenceName": "DS_PostgreDB",
									"type": "DatasetReference",
									"parameters": {
										"KVName": {
											"value": "@pipeline().parameters.KVName",
											"type": "Expression"
										},
										"server": {
											"value": "@pipeline().parameters.server",
											"type": "Expression"
										},
										"port": {
											"value": "@pipeline().parameters.port",
											"type": "Expression"
										},
										"DBName": {
											"value": "@pipeline().parameters.DBName",
											"type": "Expression"
										},
										"user": {
											"value": "@pipeline().parameters.user",
											"type": "Expression"
										},
										"PWsecretName": {
											"value": "@pipeline().parameters.PWsecretName",
											"type": "Expression"
										}
									}
								},
								"firstRowOnly": false
							}
						},
						{
							"name": "UpdateWaterMark",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "GetLatestWatermark",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "JsonSource",
									"additionalColumns": [
										{
											"name": "cdc",
											"value": {
												"value": "@activity('GetLatestWatermark').output.value[0].latest_watermark",
												"type": "Expression"
											}
										}
									],
									"storeSettings": {
										"type": "AzureBlobFSReadSettings",
										"recursive": false,
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "JsonReadSettings"
									}
								},
								"sink": {
									"type": "JsonSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "JsonWriteSettings"
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"mappings": [
										{
											"source": {
												"path": "$['cdc']"
											},
											"sink": {
												"path": "cdc"
											}
										}
									]
								}
							},
							"inputs": [
								{
									"referenceName": "DS_ADLSG2_Json",
									"type": "DatasetReference",
									"parameters": {
										"storageAccountName": {
											"value": "@pipeline().parameters.StorageAccountName",
											"type": "Expression"
										},
										"containerName": {
											"value": "@pipeline().parameters.WatermarkContainer",
											"type": "Expression"
										},
										"fileDir": {
											"value": "@concat(pipeline().parameters.WatermarkFIleDir,'/',pipeline().parameters.Table)",
											"type": "Expression"
										},
										"fileName": {
											"value": "@pipeline().parameters.WatermarkEmptyFileName",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "DS_ADLSG2_Json",
									"type": "DatasetReference",
									"parameters": {
										"storageAccountName": {
											"value": "@pipeline().parameters.StorageAccountName",
											"type": "Expression"
										},
										"containerName": {
											"value": "@pipeline().parameters.WatermarkContainer",
											"type": "Expression"
										},
										"fileDir": {
											"value": "@concat(pipeline().parameters.WatermarkFIleDir,'/',pipeline().parameters.Table)",
											"type": "Expression"
										},
										"fileName": {
											"value": "@pipeline().parameters.WatermarkFileName",
											"type": "Expression"
										}
									}
								}
							]
						}
					]
				}
			},
			{
				"name": "Get PLStartDT",
				"type": "SetVariable",
				"dependsOn": [],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "PLStartDT",
					"value": {
						"value": "@utcNow()",
						"type": "Expression"
					}
				}
			}
		],
		"parameters": {
			"Schema": {
				"type": "string"
			},
			"Table": {
				"type": "string"
			},
			"StorageAccountName": {
				"type": "string"
			},
			"WatermarkFIleDir": {
				"type": "string"
			},
			"WatermarkFileName": {
				"type": "string"
			},
			"DataContainer": {
				"type": "string"
			},
			"WatermarkColName": {
				"type": "string"
			},
			"KVName": {
				"type": "string"
			},
			"server": {
				"type": "string"
			},
			"port": {
				"type": "string"
			},
			"DBName": {
				"type": "string"
			},
			"PWsecretName": {
				"type": "string"
			},
			"user": {
				"type": "string"
			},
			"BackfillWatermark": {
				"type": "string"
			},
			"WatermarkEmptyFileName": {
				"type": "string"
			},
			"WatermarkContainer": {
				"type": "string"
			}
		},
		"variables": {
			"PLStartDT": {
				"type": "String"
			}
		},
		"annotations": [],
		"lastPublishTime": "2025-10-24T06:28:09Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}